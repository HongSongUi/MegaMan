//정점 셰이더
//텍스트 파일로 작성 , 확장자.hlsl로 저장
// HLSL 
// 정점쉐이더란 정점버퍼에 있는 모든 정점을 
// 1번씩 작업한다.
// 반드시 정점위치(SV_POSITION레지스터에)는 반드시 float4로 반환해야 한다.
// POSITION(시멘틱:의미구조)

struct VS_out
{
	float4 p : SV_POSITION;
	float4 c : COLOR0; // COLOR0~COLOR1
	float2 t : TEXCOORD0; // TEXCOORD0 ~ TEXCOORD7 (15)
};

VS_out VS(float3 pos : POSITION, float4 color : COLOR, float2 tex : TEXTURE)
{
	VS_out output;
	//  px,py,pz, 1.0f
	output.p = float4(pos, 1.0f); // 스위즐링
	output.c = color;
	output.t = tex;
	//output.t = input.tex;
	return output;
}

struct PS_input
{
	float4 p : SV_POSITION;
	float4 c : COLOR0; // COLOR0~COLOR1
	float2 t : TEXCOORD0; // TEXCOORD0 ~ TEXCOORD7 (15)
};
Texture2D    g_txTexutureA	: register(t0);
SamplerState g_SampleWrap		: register(s0);
// 해당 픽셸(SV_Target레지스터에)의 컬러를 반환한다.
float4 PS(PS_input input) : SV_Target
{
	float4 vColor = g_txTexutureA.Sample(g_SampleWrap , input.t);
	return vColor*input.c;
}